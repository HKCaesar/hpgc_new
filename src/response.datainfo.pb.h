// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: response.datainfo.proto

#ifndef PROTOBUF_response_2edatainfo_2eproto__INCLUDED
#define PROTOBUF_response_2edatainfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_response_2edatainfo_2eproto();
void protobuf_AssignDesc_response_2edatainfo_2eproto();
void protobuf_ShutdownFile_response_2edatainfo_2eproto();

class VectorBarrel;
class DataInfo;

enum DataType {
  OK = 0,
  WRONG = 1
};
bool DataType_IsValid(int value);
const DataType DataType_MIN = OK;
const DataType DataType_MAX = WRONG;
const int DataType_ARRAYSIZE = DataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataType_descriptor();
inline const ::std::string& DataType_Name(DataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataType_descriptor(), value);
}
inline bool DataType_Parse(
    const ::std::string& name, DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataType>(
    DataType_descriptor(), name, value);
}
// ===================================================================

class VectorBarrel : public ::google::protobuf::Message {
 public:
  VectorBarrel();
  virtual ~VectorBarrel();

  VectorBarrel(const VectorBarrel& from);

  inline VectorBarrel& operator=(const VectorBarrel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VectorBarrel& default_instance();

  void Swap(VectorBarrel* other);

  // implements Message ----------------------------------------------

  VectorBarrel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VectorBarrel& from);
  void MergeFrom(const VectorBarrel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string SrcDataSource = 1;
  inline bool has_srcdatasource() const;
  inline void clear_srcdatasource();
  static const int kSrcDataSourceFieldNumber = 1;
  inline const ::std::string& srcdatasource() const;
  inline void set_srcdatasource(const ::std::string& value);
  inline void set_srcdatasource(const char* value);
  inline void set_srcdatasource(const char* value, size_t size);
  inline ::std::string* mutable_srcdatasource();
  inline ::std::string* release_srcdatasource();
  inline void set_allocated_srcdatasource(::std::string* srcdatasource);

  // required string SrcLayer = 2;
  inline bool has_srclayer() const;
  inline void clear_srclayer();
  static const int kSrcLayerFieldNumber = 2;
  inline const ::std::string& srclayer() const;
  inline void set_srclayer(const ::std::string& value);
  inline void set_srclayer(const char* value);
  inline void set_srclayer(const char* value, size_t size);
  inline ::std::string* mutable_srclayer();
  inline ::std::string* release_srclayer();
  inline void set_allocated_srclayer(::std::string* srclayer);

  // required string DstDataSource = 3;
  inline bool has_dstdatasource() const;
  inline void clear_dstdatasource();
  static const int kDstDataSourceFieldNumber = 3;
  inline const ::std::string& dstdatasource() const;
  inline void set_dstdatasource(const ::std::string& value);
  inline void set_dstdatasource(const char* value);
  inline void set_dstdatasource(const char* value, size_t size);
  inline ::std::string* mutable_dstdatasource();
  inline ::std::string* release_dstdatasource();
  inline void set_allocated_dstdatasource(::std::string* dstdatasource);

  // required string DstLayer = 4;
  inline bool has_dstlayer() const;
  inline void clear_dstlayer();
  static const int kDstLayerFieldNumber = 4;
  inline const ::std::string& dstlayer() const;
  inline void set_dstlayer(const ::std::string& value);
  inline void set_dstlayer(const char* value);
  inline void set_dstlayer(const char* value, size_t size);
  inline ::std::string* mutable_dstlayer();
  inline ::std::string* release_dstlayer();
  inline void set_allocated_dstlayer(::std::string* dstlayer);

  // repeated int32 features = 5;
  inline int features_size() const;
  inline void clear_features();
  static const int kFeaturesFieldNumber = 5;
  inline ::google::protobuf::int32 features(int index) const;
  inline void set_features(int index, ::google::protobuf::int32 value);
  inline void add_features(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      features() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_features();

  // @@protoc_insertion_point(class_scope:VectorBarrel)
 private:
  inline void set_has_srcdatasource();
  inline void clear_has_srcdatasource();
  inline void set_has_srclayer();
  inline void clear_has_srclayer();
  inline void set_has_dstdatasource();
  inline void clear_has_dstdatasource();
  inline void set_has_dstlayer();
  inline void clear_has_dstlayer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* srcdatasource_;
  ::std::string* srclayer_;
  ::std::string* dstdatasource_;
  ::std::string* dstlayer_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > features_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_response_2edatainfo_2eproto();
  friend void protobuf_AssignDesc_response_2edatainfo_2eproto();
  friend void protobuf_ShutdownFile_response_2edatainfo_2eproto();

  void InitAsDefaultInstance();
  static VectorBarrel* default_instance_;
};
// -------------------------------------------------------------------

class DataInfo : public ::google::protobuf::Message {
 public:
  DataInfo();
  virtual ~DataInfo();

  DataInfo(const DataInfo& from);

  inline DataInfo& operator=(const DataInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataInfo& default_instance();

  void Swap(DataInfo* other);

  // implements Message ----------------------------------------------

  DataInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataInfo& from);
  void MergeFrom(const DataInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .DataType Type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::DataType type() const;
  inline void set_type(::DataType value);

  // required int32 DataIndex = 2;
  inline bool has_dataindex() const;
  inline void clear_dataindex();
  static const int kDataIndexFieldNumber = 2;
  inline ::google::protobuf::int32 dataindex() const;
  inline void set_dataindex(::google::protobuf::int32 value);

  // required .VectorBarrel barrel = 3;
  inline bool has_barrel() const;
  inline void clear_barrel();
  static const int kBarrelFieldNumber = 3;
  inline const ::VectorBarrel& barrel() const;
  inline ::VectorBarrel* mutable_barrel();
  inline ::VectorBarrel* release_barrel();
  inline void set_allocated_barrel(::VectorBarrel* barrel);

  // @@protoc_insertion_point(class_scope:DataInfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_dataindex();
  inline void clear_has_dataindex();
  inline void set_has_barrel();
  inline void clear_has_barrel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 dataindex_;
  ::VectorBarrel* barrel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_response_2edatainfo_2eproto();
  friend void protobuf_AssignDesc_response_2edatainfo_2eproto();
  friend void protobuf_ShutdownFile_response_2edatainfo_2eproto();

  void InitAsDefaultInstance();
  static DataInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// VectorBarrel

// required string SrcDataSource = 1;
inline bool VectorBarrel::has_srcdatasource() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VectorBarrel::set_has_srcdatasource() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VectorBarrel::clear_has_srcdatasource() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VectorBarrel::clear_srcdatasource() {
  if (srcdatasource_ != &::google::protobuf::internal::kEmptyString) {
    srcdatasource_->clear();
  }
  clear_has_srcdatasource();
}
inline const ::std::string& VectorBarrel::srcdatasource() const {
  return *srcdatasource_;
}
inline void VectorBarrel::set_srcdatasource(const ::std::string& value) {
  set_has_srcdatasource();
  if (srcdatasource_ == &::google::protobuf::internal::kEmptyString) {
    srcdatasource_ = new ::std::string;
  }
  srcdatasource_->assign(value);
}
inline void VectorBarrel::set_srcdatasource(const char* value) {
  set_has_srcdatasource();
  if (srcdatasource_ == &::google::protobuf::internal::kEmptyString) {
    srcdatasource_ = new ::std::string;
  }
  srcdatasource_->assign(value);
}
inline void VectorBarrel::set_srcdatasource(const char* value, size_t size) {
  set_has_srcdatasource();
  if (srcdatasource_ == &::google::protobuf::internal::kEmptyString) {
    srcdatasource_ = new ::std::string;
  }
  srcdatasource_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VectorBarrel::mutable_srcdatasource() {
  set_has_srcdatasource();
  if (srcdatasource_ == &::google::protobuf::internal::kEmptyString) {
    srcdatasource_ = new ::std::string;
  }
  return srcdatasource_;
}
inline ::std::string* VectorBarrel::release_srcdatasource() {
  clear_has_srcdatasource();
  if (srcdatasource_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = srcdatasource_;
    srcdatasource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VectorBarrel::set_allocated_srcdatasource(::std::string* srcdatasource) {
  if (srcdatasource_ != &::google::protobuf::internal::kEmptyString) {
    delete srcdatasource_;
  }
  if (srcdatasource) {
    set_has_srcdatasource();
    srcdatasource_ = srcdatasource;
  } else {
    clear_has_srcdatasource();
    srcdatasource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string SrcLayer = 2;
inline bool VectorBarrel::has_srclayer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VectorBarrel::set_has_srclayer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VectorBarrel::clear_has_srclayer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VectorBarrel::clear_srclayer() {
  if (srclayer_ != &::google::protobuf::internal::kEmptyString) {
    srclayer_->clear();
  }
  clear_has_srclayer();
}
inline const ::std::string& VectorBarrel::srclayer() const {
  return *srclayer_;
}
inline void VectorBarrel::set_srclayer(const ::std::string& value) {
  set_has_srclayer();
  if (srclayer_ == &::google::protobuf::internal::kEmptyString) {
    srclayer_ = new ::std::string;
  }
  srclayer_->assign(value);
}
inline void VectorBarrel::set_srclayer(const char* value) {
  set_has_srclayer();
  if (srclayer_ == &::google::protobuf::internal::kEmptyString) {
    srclayer_ = new ::std::string;
  }
  srclayer_->assign(value);
}
inline void VectorBarrel::set_srclayer(const char* value, size_t size) {
  set_has_srclayer();
  if (srclayer_ == &::google::protobuf::internal::kEmptyString) {
    srclayer_ = new ::std::string;
  }
  srclayer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VectorBarrel::mutable_srclayer() {
  set_has_srclayer();
  if (srclayer_ == &::google::protobuf::internal::kEmptyString) {
    srclayer_ = new ::std::string;
  }
  return srclayer_;
}
inline ::std::string* VectorBarrel::release_srclayer() {
  clear_has_srclayer();
  if (srclayer_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = srclayer_;
    srclayer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VectorBarrel::set_allocated_srclayer(::std::string* srclayer) {
  if (srclayer_ != &::google::protobuf::internal::kEmptyString) {
    delete srclayer_;
  }
  if (srclayer) {
    set_has_srclayer();
    srclayer_ = srclayer;
  } else {
    clear_has_srclayer();
    srclayer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string DstDataSource = 3;
inline bool VectorBarrel::has_dstdatasource() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VectorBarrel::set_has_dstdatasource() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VectorBarrel::clear_has_dstdatasource() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VectorBarrel::clear_dstdatasource() {
  if (dstdatasource_ != &::google::protobuf::internal::kEmptyString) {
    dstdatasource_->clear();
  }
  clear_has_dstdatasource();
}
inline const ::std::string& VectorBarrel::dstdatasource() const {
  return *dstdatasource_;
}
inline void VectorBarrel::set_dstdatasource(const ::std::string& value) {
  set_has_dstdatasource();
  if (dstdatasource_ == &::google::protobuf::internal::kEmptyString) {
    dstdatasource_ = new ::std::string;
  }
  dstdatasource_->assign(value);
}
inline void VectorBarrel::set_dstdatasource(const char* value) {
  set_has_dstdatasource();
  if (dstdatasource_ == &::google::protobuf::internal::kEmptyString) {
    dstdatasource_ = new ::std::string;
  }
  dstdatasource_->assign(value);
}
inline void VectorBarrel::set_dstdatasource(const char* value, size_t size) {
  set_has_dstdatasource();
  if (dstdatasource_ == &::google::protobuf::internal::kEmptyString) {
    dstdatasource_ = new ::std::string;
  }
  dstdatasource_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VectorBarrel::mutable_dstdatasource() {
  set_has_dstdatasource();
  if (dstdatasource_ == &::google::protobuf::internal::kEmptyString) {
    dstdatasource_ = new ::std::string;
  }
  return dstdatasource_;
}
inline ::std::string* VectorBarrel::release_dstdatasource() {
  clear_has_dstdatasource();
  if (dstdatasource_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dstdatasource_;
    dstdatasource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VectorBarrel::set_allocated_dstdatasource(::std::string* dstdatasource) {
  if (dstdatasource_ != &::google::protobuf::internal::kEmptyString) {
    delete dstdatasource_;
  }
  if (dstdatasource) {
    set_has_dstdatasource();
    dstdatasource_ = dstdatasource;
  } else {
    clear_has_dstdatasource();
    dstdatasource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string DstLayer = 4;
inline bool VectorBarrel::has_dstlayer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VectorBarrel::set_has_dstlayer() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VectorBarrel::clear_has_dstlayer() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VectorBarrel::clear_dstlayer() {
  if (dstlayer_ != &::google::protobuf::internal::kEmptyString) {
    dstlayer_->clear();
  }
  clear_has_dstlayer();
}
inline const ::std::string& VectorBarrel::dstlayer() const {
  return *dstlayer_;
}
inline void VectorBarrel::set_dstlayer(const ::std::string& value) {
  set_has_dstlayer();
  if (dstlayer_ == &::google::protobuf::internal::kEmptyString) {
    dstlayer_ = new ::std::string;
  }
  dstlayer_->assign(value);
}
inline void VectorBarrel::set_dstlayer(const char* value) {
  set_has_dstlayer();
  if (dstlayer_ == &::google::protobuf::internal::kEmptyString) {
    dstlayer_ = new ::std::string;
  }
  dstlayer_->assign(value);
}
inline void VectorBarrel::set_dstlayer(const char* value, size_t size) {
  set_has_dstlayer();
  if (dstlayer_ == &::google::protobuf::internal::kEmptyString) {
    dstlayer_ = new ::std::string;
  }
  dstlayer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VectorBarrel::mutable_dstlayer() {
  set_has_dstlayer();
  if (dstlayer_ == &::google::protobuf::internal::kEmptyString) {
    dstlayer_ = new ::std::string;
  }
  return dstlayer_;
}
inline ::std::string* VectorBarrel::release_dstlayer() {
  clear_has_dstlayer();
  if (dstlayer_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dstlayer_;
    dstlayer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VectorBarrel::set_allocated_dstlayer(::std::string* dstlayer) {
  if (dstlayer_ != &::google::protobuf::internal::kEmptyString) {
    delete dstlayer_;
  }
  if (dstlayer) {
    set_has_dstlayer();
    dstlayer_ = dstlayer;
  } else {
    clear_has_dstlayer();
    dstlayer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int32 features = 5;
inline int VectorBarrel::features_size() const {
  return features_.size();
}
inline void VectorBarrel::clear_features() {
  features_.Clear();
}
inline ::google::protobuf::int32 VectorBarrel::features(int index) const {
  return features_.Get(index);
}
inline void VectorBarrel::set_features(int index, ::google::protobuf::int32 value) {
  features_.Set(index, value);
}
inline void VectorBarrel::add_features(::google::protobuf::int32 value) {
  features_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
VectorBarrel::features() const {
  return features_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
VectorBarrel::mutable_features() {
  return &features_;
}

// -------------------------------------------------------------------

// DataInfo

// required .DataType Type = 1;
inline bool DataInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::DataType DataInfo::type() const {
  return static_cast< ::DataType >(type_);
}
inline void DataInfo::set_type(::DataType value) {
  assert(::DataType_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 DataIndex = 2;
inline bool DataInfo::has_dataindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataInfo::set_has_dataindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataInfo::clear_has_dataindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataInfo::clear_dataindex() {
  dataindex_ = 0;
  clear_has_dataindex();
}
inline ::google::protobuf::int32 DataInfo::dataindex() const {
  return dataindex_;
}
inline void DataInfo::set_dataindex(::google::protobuf::int32 value) {
  set_has_dataindex();
  dataindex_ = value;
}

// required .VectorBarrel barrel = 3;
inline bool DataInfo::has_barrel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataInfo::set_has_barrel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataInfo::clear_has_barrel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataInfo::clear_barrel() {
  if (barrel_ != NULL) barrel_->::VectorBarrel::Clear();
  clear_has_barrel();
}
inline const ::VectorBarrel& DataInfo::barrel() const {
  return barrel_ != NULL ? *barrel_ : *default_instance_->barrel_;
}
inline ::VectorBarrel* DataInfo::mutable_barrel() {
  set_has_barrel();
  if (barrel_ == NULL) barrel_ = new ::VectorBarrel;
  return barrel_;
}
inline ::VectorBarrel* DataInfo::release_barrel() {
  clear_has_barrel();
  ::VectorBarrel* temp = barrel_;
  barrel_ = NULL;
  return temp;
}
inline void DataInfo::set_allocated_barrel(::VectorBarrel* barrel) {
  delete barrel_;
  barrel_ = barrel;
  if (barrel) {
    set_has_barrel();
  } else {
    clear_has_barrel();
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DataType>() {
  return ::DataType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_response_2edatainfo_2eproto__INCLUDED
