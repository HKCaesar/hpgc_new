// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.message.proto

#ifndef PROTOBUF_rpc_2emessage_2eproto__INCLUDED
#define PROTOBUF_rpc_2emessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace hpgc {
namespace data {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rpc_2emessage_2eproto();
void protobuf_AssignDesc_rpc_2emessage_2eproto();
void protobuf_ShutdownFile_rpc_2emessage_2eproto();

class EmptyMessage;
class RegisterWorkerRequest;
class TaskMessage;
class DataMessage;
class DataCellar;
class CCMsg1;
class CCMsg2;
class CCMsg3;
class CCMsg4;

enum MessageType {
  REGISTER_WORKER = 1,
  WORKER_RUN_TASK = 2,
  WORKER_TASK_DONE = 3,
  WORKER_FINALIZE = 4,
  WORKER_FINALIZE_DONE = 5,
  CC_MESSAGE_1 = 6,
  CC_MESSAGE_2 = 7,
  CC_MESSAGE_3 = 8,
  CC_MESSAGE_4 = 9
};
bool MessageType_IsValid(int value);
const MessageType MessageType_MIN = REGISTER_WORKER;
const MessageType MessageType_MAX = CC_MESSAGE_4;
const int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageType_descriptor();
inline const ::std::string& MessageType_Name(MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageType_descriptor(), value);
}
inline bool MessageType_Parse(
    const ::std::string& name, MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
enum TaskType {
  TASK_OK = 1,
  TASK_WRONG = 2
};
bool TaskType_IsValid(int value);
const TaskType TaskType_MIN = TASK_OK;
const TaskType TaskType_MAX = TASK_WRONG;
const int TaskType_ARRAYSIZE = TaskType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TaskType_descriptor();
inline const ::std::string& TaskType_Name(TaskType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TaskType_descriptor(), value);
}
inline bool TaskType_Parse(
    const ::std::string& name, TaskType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TaskType>(
    TaskType_descriptor(), name, value);
}
enum LayerType {
  TWO_LAYER = 1,
  THREE_LAYER = 2
};
bool LayerType_IsValid(int value);
const LayerType LayerType_MIN = TWO_LAYER;
const LayerType LayerType_MAX = THREE_LAYER;
const int LayerType_ARRAYSIZE = LayerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LayerType_descriptor();
inline const ::std::string& LayerType_Name(LayerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LayerType_descriptor(), value);
}
inline bool LayerType_Parse(
    const ::std::string& name, LayerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LayerType>(
    LayerType_descriptor(), name, value);
}
// ===================================================================

class EmptyMessage : public ::google::protobuf::Message {
 public:
  EmptyMessage();
  virtual ~EmptyMessage();

  EmptyMessage(const EmptyMessage& from);

  inline EmptyMessage& operator=(const EmptyMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmptyMessage& default_instance();

  void Swap(EmptyMessage* other);

  // implements Message ----------------------------------------------

  EmptyMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EmptyMessage& from);
  void MergeFrom(const EmptyMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hpgc.data.EmptyMessage)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_rpc_2emessage_2eproto();
  friend void protobuf_AssignDesc_rpc_2emessage_2eproto();
  friend void protobuf_ShutdownFile_rpc_2emessage_2eproto();

  void InitAsDefaultInstance();
  static EmptyMessage* default_instance_;
};
// -------------------------------------------------------------------

class RegisterWorkerRequest : public ::google::protobuf::Message {
 public:
  RegisterWorkerRequest();
  virtual ~RegisterWorkerRequest();

  RegisterWorkerRequest(const RegisterWorkerRequest& from);

  inline RegisterWorkerRequest& operator=(const RegisterWorkerRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterWorkerRequest& default_instance();

  void Swap(RegisterWorkerRequest* other);

  // implements Message ----------------------------------------------

  RegisterWorkerRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegisterWorkerRequest& from);
  void MergeFrom(const RegisterWorkerRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:hpgc.data.RegisterWorkerRequest)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_rpc_2emessage_2eproto();
  friend void protobuf_AssignDesc_rpc_2emessage_2eproto();
  friend void protobuf_ShutdownFile_rpc_2emessage_2eproto();

  void InitAsDefaultInstance();
  static RegisterWorkerRequest* default_instance_;
};
// -------------------------------------------------------------------

class TaskMessage : public ::google::protobuf::Message {
 public:
  TaskMessage();
  virtual ~TaskMessage();

  TaskMessage(const TaskMessage& from);

  inline TaskMessage& operator=(const TaskMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskMessage& default_instance();

  void Swap(TaskMessage* other);

  // implements Message ----------------------------------------------

  TaskMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskMessage& from);
  void MergeFrom(const TaskMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .hpgc.data.TaskType Type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::hpgc::data::TaskType type() const;
  inline void set_type(::hpgc::data::TaskType value);

  // required int32 DataIndex = 2;
  inline bool has_dataindex() const;
  inline void clear_dataindex();
  static const int kDataIndexFieldNumber = 2;
  inline ::google::protobuf::int32 dataindex() const;
  inline void set_dataindex(::google::protobuf::int32 value);

  // required string StartTime = 3;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 3;
  inline const ::std::string& starttime() const;
  inline void set_starttime(const ::std::string& value);
  inline void set_starttime(const char* value);
  inline void set_starttime(const char* value, size_t size);
  inline ::std::string* mutable_starttime();
  inline ::std::string* release_starttime();
  inline void set_allocated_starttime(::std::string* starttime);

  // required string EndTime = 4;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 4;
  inline const ::std::string& endtime() const;
  inline void set_endtime(const ::std::string& value);
  inline void set_endtime(const char* value);
  inline void set_endtime(const char* value, size_t size);
  inline ::std::string* mutable_endtime();
  inline ::std::string* release_endtime();
  inline void set_allocated_endtime(::std::string* endtime);

  // optional string description = 5;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 5;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // @@protoc_insertion_point(class_scope:hpgc.data.TaskMessage)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_dataindex();
  inline void clear_has_dataindex();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_description();
  inline void clear_has_description();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 dataindex_;
  ::std::string* starttime_;
  ::std::string* endtime_;
  ::std::string* description_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_rpc_2emessage_2eproto();
  friend void protobuf_AssignDesc_rpc_2emessage_2eproto();
  friend void protobuf_ShutdownFile_rpc_2emessage_2eproto();

  void InitAsDefaultInstance();
  static TaskMessage* default_instance_;
};
// -------------------------------------------------------------------

class DataMessage : public ::google::protobuf::Message {
 public:
  DataMessage();
  virtual ~DataMessage();

  DataMessage(const DataMessage& from);

  inline DataMessage& operator=(const DataMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataMessage& default_instance();

  void Swap(DataMessage* other);

  // implements Message ----------------------------------------------

  DataMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataMessage& from);
  void MergeFrom(const DataMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DataIndex = 1;
  inline bool has_dataindex() const;
  inline void clear_dataindex();
  static const int kDataIndexFieldNumber = 1;
  inline ::google::protobuf::int32 dataindex() const;
  inline void set_dataindex(::google::protobuf::int32 value);

  // required string SrcDataSource = 2;
  inline bool has_srcdatasource() const;
  inline void clear_srcdatasource();
  static const int kSrcDataSourceFieldNumber = 2;
  inline const ::std::string& srcdatasource() const;
  inline void set_srcdatasource(const ::std::string& value);
  inline void set_srcdatasource(const char* value);
  inline void set_srcdatasource(const char* value, size_t size);
  inline ::std::string* mutable_srcdatasource();
  inline ::std::string* release_srcdatasource();
  inline void set_allocated_srcdatasource(::std::string* srcdatasource);

  // required string SrcLayer = 3;
  inline bool has_srclayer() const;
  inline void clear_srclayer();
  static const int kSrcLayerFieldNumber = 3;
  inline const ::std::string& srclayer() const;
  inline void set_srclayer(const ::std::string& value);
  inline void set_srclayer(const char* value);
  inline void set_srclayer(const char* value, size_t size);
  inline ::std::string* mutable_srclayer();
  inline ::std::string* release_srclayer();
  inline void set_allocated_srclayer(::std::string* srclayer);

  // required string DstDataSource = 4;
  inline bool has_dstdatasource() const;
  inline void clear_dstdatasource();
  static const int kDstDataSourceFieldNumber = 4;
  inline const ::std::string& dstdatasource() const;
  inline void set_dstdatasource(const ::std::string& value);
  inline void set_dstdatasource(const char* value);
  inline void set_dstdatasource(const char* value, size_t size);
  inline ::std::string* mutable_dstdatasource();
  inline ::std::string* release_dstdatasource();
  inline void set_allocated_dstdatasource(::std::string* dstdatasource);

  // required string DstLayer = 5;
  inline bool has_dstlayer() const;
  inline void clear_dstlayer();
  static const int kDstLayerFieldNumber = 5;
  inline const ::std::string& dstlayer() const;
  inline void set_dstlayer(const ::std::string& value);
  inline void set_dstlayer(const char* value);
  inline void set_dstlayer(const char* value, size_t size);
  inline ::std::string* mutable_dstlayer();
  inline ::std::string* release_dstlayer();
  inline void set_allocated_dstlayer(::std::string* dstlayer);

  // repeated int32 features = 6;
  inline int features_size() const;
  inline void clear_features();
  static const int kFeaturesFieldNumber = 6;
  inline ::google::protobuf::int32 features(int index) const;
  inline void set_features(int index, ::google::protobuf::int32 value);
  inline void add_features(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      features() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_features();

  // optional int32 value = 7;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 7;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // optional string description = 8;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 8;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // optional string extension = 9;
  inline bool has_extension() const;
  inline void clear_extension();
  static const int kExtensionFieldNumber = 9;
  inline const ::std::string& extension() const;
  inline void set_extension(const ::std::string& value);
  inline void set_extension(const char* value);
  inline void set_extension(const char* value, size_t size);
  inline ::std::string* mutable_extension();
  inline ::std::string* release_extension();
  inline void set_allocated_extension(::std::string* extension);

  // @@protoc_insertion_point(class_scope:hpgc.data.DataMessage)
 private:
  inline void set_has_dataindex();
  inline void clear_has_dataindex();
  inline void set_has_srcdatasource();
  inline void clear_has_srcdatasource();
  inline void set_has_srclayer();
  inline void clear_has_srclayer();
  inline void set_has_dstdatasource();
  inline void clear_has_dstdatasource();
  inline void set_has_dstlayer();
  inline void clear_has_dstlayer();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_extension();
  inline void clear_has_extension();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* srcdatasource_;
  ::std::string* srclayer_;
  ::std::string* dstdatasource_;
  ::google::protobuf::int32 dataindex_;
  ::google::protobuf::int32 value_;
  ::std::string* dstlayer_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > features_;
  ::std::string* description_;
  ::std::string* extension_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_rpc_2emessage_2eproto();
  friend void protobuf_AssignDesc_rpc_2emessage_2eproto();
  friend void protobuf_ShutdownFile_rpc_2emessage_2eproto();

  void InitAsDefaultInstance();
  static DataMessage* default_instance_;
};
// -------------------------------------------------------------------

class DataCellar : public ::google::protobuf::Message {
 public:
  DataCellar();
  virtual ~DataCellar();

  DataCellar(const DataCellar& from);

  inline DataCellar& operator=(const DataCellar& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataCellar& default_instance();

  void Swap(DataCellar* other);

  // implements Message ----------------------------------------------

  DataCellar* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataCellar& from);
  void MergeFrom(const DataCellar& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .hpgc.data.DataMessage cellar = 1;
  inline int cellar_size() const;
  inline void clear_cellar();
  static const int kCellarFieldNumber = 1;
  inline const ::hpgc::data::DataMessage& cellar(int index) const;
  inline ::hpgc::data::DataMessage* mutable_cellar(int index);
  inline ::hpgc::data::DataMessage* add_cellar();
  inline const ::google::protobuf::RepeatedPtrField< ::hpgc::data::DataMessage >&
      cellar() const;
  inline ::google::protobuf::RepeatedPtrField< ::hpgc::data::DataMessage >*
      mutable_cellar();

  // @@protoc_insertion_point(class_scope:hpgc.data.DataCellar)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::hpgc::data::DataMessage > cellar_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_rpc_2emessage_2eproto();
  friend void protobuf_AssignDesc_rpc_2emessage_2eproto();
  friend void protobuf_ShutdownFile_rpc_2emessage_2eproto();

  void InitAsDefaultInstance();
  static DataCellar* default_instance_;
};
// -------------------------------------------------------------------

class CCMsg1 : public ::google::protobuf::Message {
 public:
  CCMsg1();
  virtual ~CCMsg1();

  CCMsg1(const CCMsg1& from);

  inline CCMsg1& operator=(const CCMsg1& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CCMsg1& default_instance();

  void Swap(CCMsg1* other);

  // implements Message ----------------------------------------------

  CCMsg1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CCMsg1& from);
  void MergeFrom(const CCMsg1& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:hpgc.data.CCMsg1)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_rpc_2emessage_2eproto();
  friend void protobuf_AssignDesc_rpc_2emessage_2eproto();
  friend void protobuf_ShutdownFile_rpc_2emessage_2eproto();

  void InitAsDefaultInstance();
  static CCMsg1* default_instance_;
};
// -------------------------------------------------------------------

class CCMsg2 : public ::google::protobuf::Message {
 public:
  CCMsg2();
  virtual ~CCMsg2();

  CCMsg2(const CCMsg2& from);

  inline CCMsg2& operator=(const CCMsg2& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CCMsg2& default_instance();

  void Swap(CCMsg2* other);

  // implements Message ----------------------------------------------

  CCMsg2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CCMsg2& from);
  void MergeFrom(const CCMsg2& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool IsDone = 1;
  inline bool has_isdone() const;
  inline void clear_isdone();
  static const int kIsDoneFieldNumber = 1;
  inline bool isdone() const;
  inline void set_isdone(bool value);

  // @@protoc_insertion_point(class_scope:hpgc.data.CCMsg2)
 private:
  inline void set_has_isdone();
  inline void clear_has_isdone();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool isdone_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_rpc_2emessage_2eproto();
  friend void protobuf_AssignDesc_rpc_2emessage_2eproto();
  friend void protobuf_ShutdownFile_rpc_2emessage_2eproto();

  void InitAsDefaultInstance();
  static CCMsg2* default_instance_;
};
// -------------------------------------------------------------------

class CCMsg3 : public ::google::protobuf::Message {
 public:
  CCMsg3();
  virtual ~CCMsg3();

  CCMsg3(const CCMsg3& from);

  inline CCMsg3& operator=(const CCMsg3& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CCMsg3& default_instance();

  void Swap(CCMsg3* other);

  // implements Message ----------------------------------------------

  CCMsg3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CCMsg3& from);
  void MergeFrom(const CCMsg3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .hpgc.data.LayerType Type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::hpgc::data::LayerType type() const;
  inline void set_type(::hpgc::data::LayerType value);

  // required int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:hpgc.data.CCMsg3)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_rpc_2emessage_2eproto();
  friend void protobuf_AssignDesc_rpc_2emessage_2eproto();
  friend void protobuf_ShutdownFile_rpc_2emessage_2eproto();

  void InitAsDefaultInstance();
  static CCMsg3* default_instance_;
};
// -------------------------------------------------------------------

class CCMsg4 : public ::google::protobuf::Message {
 public:
  CCMsg4();
  virtual ~CCMsg4();

  CCMsg4(const CCMsg4& from);

  inline CCMsg4& operator=(const CCMsg4& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CCMsg4& default_instance();

  void Swap(CCMsg4* other);

  // implements Message ----------------------------------------------

  CCMsg4* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CCMsg4& from);
  void MergeFrom(const CCMsg4& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 Column = 1;
  inline bool has_column() const;
  inline void clear_column();
  static const int kColumnFieldNumber = 1;
  inline ::google::protobuf::int32 column() const;
  inline void set_column(::google::protobuf::int32 value);

  // required int32 Row = 2;
  inline bool has_row() const;
  inline void clear_row();
  static const int kRowFieldNumber = 2;
  inline ::google::protobuf::int32 row() const;
  inline void set_row(::google::protobuf::int32 value);

  // repeated double Trans = 3;
  inline int trans_size() const;
  inline void clear_trans();
  static const int kTransFieldNumber = 3;
  inline double trans(int index) const;
  inline void set_trans(int index, double value);
  inline void add_trans(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      trans() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_trans();

  // required int32 Pixel = 4;
  inline bool has_pixel() const;
  inline void clear_pixel();
  static const int kPixelFieldNumber = 4;
  inline ::google::protobuf::int32 pixel() const;
  inline void set_pixel(::google::protobuf::int32 value);

  // required int32 Line = 5;
  inline bool has_line() const;
  inline void clear_line();
  static const int kLineFieldNumber = 5;
  inline ::google::protobuf::int32 line() const;
  inline void set_line(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:hpgc.data.CCMsg4)
 private:
  inline void set_has_column();
  inline void clear_has_column();
  inline void set_has_row();
  inline void clear_has_row();
  inline void set_has_pixel();
  inline void clear_has_pixel();
  inline void set_has_line();
  inline void clear_has_line();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 column_;
  ::google::protobuf::int32 row_;
  ::google::protobuf::RepeatedField< double > trans_;
  ::google::protobuf::int32 pixel_;
  ::google::protobuf::int32 line_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_rpc_2emessage_2eproto();
  friend void protobuf_AssignDesc_rpc_2emessage_2eproto();
  friend void protobuf_ShutdownFile_rpc_2emessage_2eproto();

  void InitAsDefaultInstance();
  static CCMsg4* default_instance_;
};
// ===================================================================


// ===================================================================

// EmptyMessage

// -------------------------------------------------------------------

// RegisterWorkerRequest

// required int32 id = 1;
inline bool RegisterWorkerRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegisterWorkerRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegisterWorkerRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegisterWorkerRequest::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 RegisterWorkerRequest::id() const {
  return id_;
}
inline void RegisterWorkerRequest::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// TaskMessage

// required .hpgc.data.TaskType Type = 1;
inline bool TaskMessage::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskMessage::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaskMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaskMessage::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::hpgc::data::TaskType TaskMessage::type() const {
  return static_cast< ::hpgc::data::TaskType >(type_);
}
inline void TaskMessage::set_type(::hpgc::data::TaskType value) {
  assert(::hpgc::data::TaskType_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 DataIndex = 2;
inline bool TaskMessage::has_dataindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TaskMessage::set_has_dataindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TaskMessage::clear_has_dataindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TaskMessage::clear_dataindex() {
  dataindex_ = 0;
  clear_has_dataindex();
}
inline ::google::protobuf::int32 TaskMessage::dataindex() const {
  return dataindex_;
}
inline void TaskMessage::set_dataindex(::google::protobuf::int32 value) {
  set_has_dataindex();
  dataindex_ = value;
}

// required string StartTime = 3;
inline bool TaskMessage::has_starttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TaskMessage::set_has_starttime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TaskMessage::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TaskMessage::clear_starttime() {
  if (starttime_ != &::google::protobuf::internal::kEmptyString) {
    starttime_->clear();
  }
  clear_has_starttime();
}
inline const ::std::string& TaskMessage::starttime() const {
  return *starttime_;
}
inline void TaskMessage::set_starttime(const ::std::string& value) {
  set_has_starttime();
  if (starttime_ == &::google::protobuf::internal::kEmptyString) {
    starttime_ = new ::std::string;
  }
  starttime_->assign(value);
}
inline void TaskMessage::set_starttime(const char* value) {
  set_has_starttime();
  if (starttime_ == &::google::protobuf::internal::kEmptyString) {
    starttime_ = new ::std::string;
  }
  starttime_->assign(value);
}
inline void TaskMessage::set_starttime(const char* value, size_t size) {
  set_has_starttime();
  if (starttime_ == &::google::protobuf::internal::kEmptyString) {
    starttime_ = new ::std::string;
  }
  starttime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TaskMessage::mutable_starttime() {
  set_has_starttime();
  if (starttime_ == &::google::protobuf::internal::kEmptyString) {
    starttime_ = new ::std::string;
  }
  return starttime_;
}
inline ::std::string* TaskMessage::release_starttime() {
  clear_has_starttime();
  if (starttime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = starttime_;
    starttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TaskMessage::set_allocated_starttime(::std::string* starttime) {
  if (starttime_ != &::google::protobuf::internal::kEmptyString) {
    delete starttime_;
  }
  if (starttime) {
    set_has_starttime();
    starttime_ = starttime;
  } else {
    clear_has_starttime();
    starttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string EndTime = 4;
inline bool TaskMessage::has_endtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TaskMessage::set_has_endtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TaskMessage::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TaskMessage::clear_endtime() {
  if (endtime_ != &::google::protobuf::internal::kEmptyString) {
    endtime_->clear();
  }
  clear_has_endtime();
}
inline const ::std::string& TaskMessage::endtime() const {
  return *endtime_;
}
inline void TaskMessage::set_endtime(const ::std::string& value) {
  set_has_endtime();
  if (endtime_ == &::google::protobuf::internal::kEmptyString) {
    endtime_ = new ::std::string;
  }
  endtime_->assign(value);
}
inline void TaskMessage::set_endtime(const char* value) {
  set_has_endtime();
  if (endtime_ == &::google::protobuf::internal::kEmptyString) {
    endtime_ = new ::std::string;
  }
  endtime_->assign(value);
}
inline void TaskMessage::set_endtime(const char* value, size_t size) {
  set_has_endtime();
  if (endtime_ == &::google::protobuf::internal::kEmptyString) {
    endtime_ = new ::std::string;
  }
  endtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TaskMessage::mutable_endtime() {
  set_has_endtime();
  if (endtime_ == &::google::protobuf::internal::kEmptyString) {
    endtime_ = new ::std::string;
  }
  return endtime_;
}
inline ::std::string* TaskMessage::release_endtime() {
  clear_has_endtime();
  if (endtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = endtime_;
    endtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TaskMessage::set_allocated_endtime(::std::string* endtime) {
  if (endtime_ != &::google::protobuf::internal::kEmptyString) {
    delete endtime_;
  }
  if (endtime) {
    set_has_endtime();
    endtime_ = endtime;
  } else {
    clear_has_endtime();
    endtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string description = 5;
inline bool TaskMessage::has_description() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TaskMessage::set_has_description() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TaskMessage::clear_has_description() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TaskMessage::clear_description() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& TaskMessage::description() const {
  return *description_;
}
inline void TaskMessage::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void TaskMessage::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void TaskMessage::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TaskMessage::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  return description_;
}
inline ::std::string* TaskMessage::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TaskMessage::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// DataMessage

// required int32 DataIndex = 1;
inline bool DataMessage::has_dataindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataMessage::set_has_dataindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataMessage::clear_has_dataindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataMessage::clear_dataindex() {
  dataindex_ = 0;
  clear_has_dataindex();
}
inline ::google::protobuf::int32 DataMessage::dataindex() const {
  return dataindex_;
}
inline void DataMessage::set_dataindex(::google::protobuf::int32 value) {
  set_has_dataindex();
  dataindex_ = value;
}

// required string SrcDataSource = 2;
inline bool DataMessage::has_srcdatasource() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataMessage::set_has_srcdatasource() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataMessage::clear_has_srcdatasource() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataMessage::clear_srcdatasource() {
  if (srcdatasource_ != &::google::protobuf::internal::kEmptyString) {
    srcdatasource_->clear();
  }
  clear_has_srcdatasource();
}
inline const ::std::string& DataMessage::srcdatasource() const {
  return *srcdatasource_;
}
inline void DataMessage::set_srcdatasource(const ::std::string& value) {
  set_has_srcdatasource();
  if (srcdatasource_ == &::google::protobuf::internal::kEmptyString) {
    srcdatasource_ = new ::std::string;
  }
  srcdatasource_->assign(value);
}
inline void DataMessage::set_srcdatasource(const char* value) {
  set_has_srcdatasource();
  if (srcdatasource_ == &::google::protobuf::internal::kEmptyString) {
    srcdatasource_ = new ::std::string;
  }
  srcdatasource_->assign(value);
}
inline void DataMessage::set_srcdatasource(const char* value, size_t size) {
  set_has_srcdatasource();
  if (srcdatasource_ == &::google::protobuf::internal::kEmptyString) {
    srcdatasource_ = new ::std::string;
  }
  srcdatasource_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataMessage::mutable_srcdatasource() {
  set_has_srcdatasource();
  if (srcdatasource_ == &::google::protobuf::internal::kEmptyString) {
    srcdatasource_ = new ::std::string;
  }
  return srcdatasource_;
}
inline ::std::string* DataMessage::release_srcdatasource() {
  clear_has_srcdatasource();
  if (srcdatasource_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = srcdatasource_;
    srcdatasource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DataMessage::set_allocated_srcdatasource(::std::string* srcdatasource) {
  if (srcdatasource_ != &::google::protobuf::internal::kEmptyString) {
    delete srcdatasource_;
  }
  if (srcdatasource) {
    set_has_srcdatasource();
    srcdatasource_ = srcdatasource;
  } else {
    clear_has_srcdatasource();
    srcdatasource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string SrcLayer = 3;
inline bool DataMessage::has_srclayer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataMessage::set_has_srclayer() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataMessage::clear_has_srclayer() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataMessage::clear_srclayer() {
  if (srclayer_ != &::google::protobuf::internal::kEmptyString) {
    srclayer_->clear();
  }
  clear_has_srclayer();
}
inline const ::std::string& DataMessage::srclayer() const {
  return *srclayer_;
}
inline void DataMessage::set_srclayer(const ::std::string& value) {
  set_has_srclayer();
  if (srclayer_ == &::google::protobuf::internal::kEmptyString) {
    srclayer_ = new ::std::string;
  }
  srclayer_->assign(value);
}
inline void DataMessage::set_srclayer(const char* value) {
  set_has_srclayer();
  if (srclayer_ == &::google::protobuf::internal::kEmptyString) {
    srclayer_ = new ::std::string;
  }
  srclayer_->assign(value);
}
inline void DataMessage::set_srclayer(const char* value, size_t size) {
  set_has_srclayer();
  if (srclayer_ == &::google::protobuf::internal::kEmptyString) {
    srclayer_ = new ::std::string;
  }
  srclayer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataMessage::mutable_srclayer() {
  set_has_srclayer();
  if (srclayer_ == &::google::protobuf::internal::kEmptyString) {
    srclayer_ = new ::std::string;
  }
  return srclayer_;
}
inline ::std::string* DataMessage::release_srclayer() {
  clear_has_srclayer();
  if (srclayer_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = srclayer_;
    srclayer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DataMessage::set_allocated_srclayer(::std::string* srclayer) {
  if (srclayer_ != &::google::protobuf::internal::kEmptyString) {
    delete srclayer_;
  }
  if (srclayer) {
    set_has_srclayer();
    srclayer_ = srclayer;
  } else {
    clear_has_srclayer();
    srclayer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string DstDataSource = 4;
inline bool DataMessage::has_dstdatasource() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DataMessage::set_has_dstdatasource() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DataMessage::clear_has_dstdatasource() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DataMessage::clear_dstdatasource() {
  if (dstdatasource_ != &::google::protobuf::internal::kEmptyString) {
    dstdatasource_->clear();
  }
  clear_has_dstdatasource();
}
inline const ::std::string& DataMessage::dstdatasource() const {
  return *dstdatasource_;
}
inline void DataMessage::set_dstdatasource(const ::std::string& value) {
  set_has_dstdatasource();
  if (dstdatasource_ == &::google::protobuf::internal::kEmptyString) {
    dstdatasource_ = new ::std::string;
  }
  dstdatasource_->assign(value);
}
inline void DataMessage::set_dstdatasource(const char* value) {
  set_has_dstdatasource();
  if (dstdatasource_ == &::google::protobuf::internal::kEmptyString) {
    dstdatasource_ = new ::std::string;
  }
  dstdatasource_->assign(value);
}
inline void DataMessage::set_dstdatasource(const char* value, size_t size) {
  set_has_dstdatasource();
  if (dstdatasource_ == &::google::protobuf::internal::kEmptyString) {
    dstdatasource_ = new ::std::string;
  }
  dstdatasource_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataMessage::mutable_dstdatasource() {
  set_has_dstdatasource();
  if (dstdatasource_ == &::google::protobuf::internal::kEmptyString) {
    dstdatasource_ = new ::std::string;
  }
  return dstdatasource_;
}
inline ::std::string* DataMessage::release_dstdatasource() {
  clear_has_dstdatasource();
  if (dstdatasource_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dstdatasource_;
    dstdatasource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DataMessage::set_allocated_dstdatasource(::std::string* dstdatasource) {
  if (dstdatasource_ != &::google::protobuf::internal::kEmptyString) {
    delete dstdatasource_;
  }
  if (dstdatasource) {
    set_has_dstdatasource();
    dstdatasource_ = dstdatasource;
  } else {
    clear_has_dstdatasource();
    dstdatasource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string DstLayer = 5;
inline bool DataMessage::has_dstlayer() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DataMessage::set_has_dstlayer() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DataMessage::clear_has_dstlayer() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DataMessage::clear_dstlayer() {
  if (dstlayer_ != &::google::protobuf::internal::kEmptyString) {
    dstlayer_->clear();
  }
  clear_has_dstlayer();
}
inline const ::std::string& DataMessage::dstlayer() const {
  return *dstlayer_;
}
inline void DataMessage::set_dstlayer(const ::std::string& value) {
  set_has_dstlayer();
  if (dstlayer_ == &::google::protobuf::internal::kEmptyString) {
    dstlayer_ = new ::std::string;
  }
  dstlayer_->assign(value);
}
inline void DataMessage::set_dstlayer(const char* value) {
  set_has_dstlayer();
  if (dstlayer_ == &::google::protobuf::internal::kEmptyString) {
    dstlayer_ = new ::std::string;
  }
  dstlayer_->assign(value);
}
inline void DataMessage::set_dstlayer(const char* value, size_t size) {
  set_has_dstlayer();
  if (dstlayer_ == &::google::protobuf::internal::kEmptyString) {
    dstlayer_ = new ::std::string;
  }
  dstlayer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataMessage::mutable_dstlayer() {
  set_has_dstlayer();
  if (dstlayer_ == &::google::protobuf::internal::kEmptyString) {
    dstlayer_ = new ::std::string;
  }
  return dstlayer_;
}
inline ::std::string* DataMessage::release_dstlayer() {
  clear_has_dstlayer();
  if (dstlayer_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dstlayer_;
    dstlayer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DataMessage::set_allocated_dstlayer(::std::string* dstlayer) {
  if (dstlayer_ != &::google::protobuf::internal::kEmptyString) {
    delete dstlayer_;
  }
  if (dstlayer) {
    set_has_dstlayer();
    dstlayer_ = dstlayer;
  } else {
    clear_has_dstlayer();
    dstlayer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int32 features = 6;
inline int DataMessage::features_size() const {
  return features_.size();
}
inline void DataMessage::clear_features() {
  features_.Clear();
}
inline ::google::protobuf::int32 DataMessage::features(int index) const {
  return features_.Get(index);
}
inline void DataMessage::set_features(int index, ::google::protobuf::int32 value) {
  features_.Set(index, value);
}
inline void DataMessage::add_features(::google::protobuf::int32 value) {
  features_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DataMessage::features() const {
  return features_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DataMessage::mutable_features() {
  return &features_;
}

// optional int32 value = 7;
inline bool DataMessage::has_value() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DataMessage::set_has_value() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DataMessage::clear_has_value() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DataMessage::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 DataMessage::value() const {
  return value_;
}
inline void DataMessage::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// optional string description = 8;
inline bool DataMessage::has_description() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DataMessage::set_has_description() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DataMessage::clear_has_description() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DataMessage::clear_description() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& DataMessage::description() const {
  return *description_;
}
inline void DataMessage::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void DataMessage::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void DataMessage::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataMessage::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  return description_;
}
inline ::std::string* DataMessage::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DataMessage::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string extension = 9;
inline bool DataMessage::has_extension() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DataMessage::set_has_extension() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DataMessage::clear_has_extension() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DataMessage::clear_extension() {
  if (extension_ != &::google::protobuf::internal::kEmptyString) {
    extension_->clear();
  }
  clear_has_extension();
}
inline const ::std::string& DataMessage::extension() const {
  return *extension_;
}
inline void DataMessage::set_extension(const ::std::string& value) {
  set_has_extension();
  if (extension_ == &::google::protobuf::internal::kEmptyString) {
    extension_ = new ::std::string;
  }
  extension_->assign(value);
}
inline void DataMessage::set_extension(const char* value) {
  set_has_extension();
  if (extension_ == &::google::protobuf::internal::kEmptyString) {
    extension_ = new ::std::string;
  }
  extension_->assign(value);
}
inline void DataMessage::set_extension(const char* value, size_t size) {
  set_has_extension();
  if (extension_ == &::google::protobuf::internal::kEmptyString) {
    extension_ = new ::std::string;
  }
  extension_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataMessage::mutable_extension() {
  set_has_extension();
  if (extension_ == &::google::protobuf::internal::kEmptyString) {
    extension_ = new ::std::string;
  }
  return extension_;
}
inline ::std::string* DataMessage::release_extension() {
  clear_has_extension();
  if (extension_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = extension_;
    extension_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DataMessage::set_allocated_extension(::std::string* extension) {
  if (extension_ != &::google::protobuf::internal::kEmptyString) {
    delete extension_;
  }
  if (extension) {
    set_has_extension();
    extension_ = extension;
  } else {
    clear_has_extension();
    extension_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// DataCellar

// repeated .hpgc.data.DataMessage cellar = 1;
inline int DataCellar::cellar_size() const {
  return cellar_.size();
}
inline void DataCellar::clear_cellar() {
  cellar_.Clear();
}
inline const ::hpgc::data::DataMessage& DataCellar::cellar(int index) const {
  return cellar_.Get(index);
}
inline ::hpgc::data::DataMessage* DataCellar::mutable_cellar(int index) {
  return cellar_.Mutable(index);
}
inline ::hpgc::data::DataMessage* DataCellar::add_cellar() {
  return cellar_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hpgc::data::DataMessage >&
DataCellar::cellar() const {
  return cellar_;
}
inline ::google::protobuf::RepeatedPtrField< ::hpgc::data::DataMessage >*
DataCellar::mutable_cellar() {
  return &cellar_;
}

// -------------------------------------------------------------------

// CCMsg1

// required int32 id = 1;
inline bool CCMsg1::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CCMsg1::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CCMsg1::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CCMsg1::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 CCMsg1::id() const {
  return id_;
}
inline void CCMsg1::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// CCMsg2

// required bool IsDone = 1;
inline bool CCMsg2::has_isdone() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CCMsg2::set_has_isdone() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CCMsg2::clear_has_isdone() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CCMsg2::clear_isdone() {
  isdone_ = false;
  clear_has_isdone();
}
inline bool CCMsg2::isdone() const {
  return isdone_;
}
inline void CCMsg2::set_isdone(bool value) {
  set_has_isdone();
  isdone_ = value;
}

// -------------------------------------------------------------------

// CCMsg3

// required .hpgc.data.LayerType Type = 1;
inline bool CCMsg3::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CCMsg3::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CCMsg3::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CCMsg3::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::hpgc::data::LayerType CCMsg3::type() const {
  return static_cast< ::hpgc::data::LayerType >(type_);
}
inline void CCMsg3::set_type(::hpgc::data::LayerType value) {
  assert(::hpgc::data::LayerType_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 id = 2;
inline bool CCMsg3::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CCMsg3::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CCMsg3::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CCMsg3::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 CCMsg3::id() const {
  return id_;
}
inline void CCMsg3::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// CCMsg4

// required int32 Column = 1;
inline bool CCMsg4::has_column() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CCMsg4::set_has_column() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CCMsg4::clear_has_column() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CCMsg4::clear_column() {
  column_ = 0;
  clear_has_column();
}
inline ::google::protobuf::int32 CCMsg4::column() const {
  return column_;
}
inline void CCMsg4::set_column(::google::protobuf::int32 value) {
  set_has_column();
  column_ = value;
}

// required int32 Row = 2;
inline bool CCMsg4::has_row() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CCMsg4::set_has_row() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CCMsg4::clear_has_row() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CCMsg4::clear_row() {
  row_ = 0;
  clear_has_row();
}
inline ::google::protobuf::int32 CCMsg4::row() const {
  return row_;
}
inline void CCMsg4::set_row(::google::protobuf::int32 value) {
  set_has_row();
  row_ = value;
}

// repeated double Trans = 3;
inline int CCMsg4::trans_size() const {
  return trans_.size();
}
inline void CCMsg4::clear_trans() {
  trans_.Clear();
}
inline double CCMsg4::trans(int index) const {
  return trans_.Get(index);
}
inline void CCMsg4::set_trans(int index, double value) {
  trans_.Set(index, value);
}
inline void CCMsg4::add_trans(double value) {
  trans_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
CCMsg4::trans() const {
  return trans_;
}
inline ::google::protobuf::RepeatedField< double >*
CCMsg4::mutable_trans() {
  return &trans_;
}

// required int32 Pixel = 4;
inline bool CCMsg4::has_pixel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CCMsg4::set_has_pixel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CCMsg4::clear_has_pixel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CCMsg4::clear_pixel() {
  pixel_ = 0;
  clear_has_pixel();
}
inline ::google::protobuf::int32 CCMsg4::pixel() const {
  return pixel_;
}
inline void CCMsg4::set_pixel(::google::protobuf::int32 value) {
  set_has_pixel();
  pixel_ = value;
}

// required int32 Line = 5;
inline bool CCMsg4::has_line() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CCMsg4::set_has_line() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CCMsg4::clear_has_line() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CCMsg4::clear_line() {
  line_ = 0;
  clear_has_line();
}
inline ::google::protobuf::int32 CCMsg4::line() const {
  return line_;
}
inline void CCMsg4::set_line(::google::protobuf::int32 value) {
  set_has_line();
  line_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace hpgc

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hpgc::data::MessageType>() {
  return ::hpgc::data::MessageType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hpgc::data::TaskType>() {
  return ::hpgc::data::TaskType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hpgc::data::LayerType>() {
  return ::hpgc::data::LayerType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rpc_2emessage_2eproto__INCLUDED
