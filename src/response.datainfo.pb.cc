// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: response.datainfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "response.datainfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hpgc {

namespace {

const ::google::protobuf::Descriptor* VectorBarrel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VectorBarrel_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DataType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_response_2edatainfo_2eproto() {
  protobuf_AddDesc_response_2edatainfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "response.datainfo.proto");
  GOOGLE_CHECK(file != NULL);
  VectorBarrel_descriptor_ = file->message_type(0);
  static const int VectorBarrel_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorBarrel, srcdatasource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorBarrel, srclayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorBarrel, dstdatasource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorBarrel, dstlayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorBarrel, features_),
  };
  VectorBarrel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VectorBarrel_descriptor_,
      VectorBarrel::default_instance_,
      VectorBarrel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorBarrel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorBarrel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VectorBarrel));
  DataInfo_descriptor_ = file->message_type(1);
  static const int DataInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, dataindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, barrel_),
  };
  DataInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataInfo_descriptor_,
      DataInfo::default_instance_,
      DataInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataInfo));
  DataType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_response_2edatainfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VectorBarrel_descriptor_, &VectorBarrel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataInfo_descriptor_, &DataInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_response_2edatainfo_2eproto() {
  delete VectorBarrel::default_instance_;
  delete VectorBarrel_reflection_;
  delete DataInfo::default_instance_;
  delete DataInfo_reflection_;
}

void protobuf_AddDesc_response_2edatainfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027response.datainfo.proto\022\004hpgc\"r\n\014Vecto"
    "rBarrel\022\025\n\rSrcDataSource\030\001 \002(\t\022\020\n\010SrcLay"
    "er\030\002 \002(\t\022\025\n\rDstDataSource\030\003 \002(\t\022\020\n\010DstLa"
    "yer\030\004 \002(\t\022\020\n\010features\030\005 \003(\005\"_\n\010DataInfo\022"
    "\034\n\004Type\030\001 \002(\0162\016.hpgc.DataType\022\021\n\tDataInd"
    "ex\030\002 \002(\005\022\"\n\006barrel\030\003 \002(\0132\022.hpgc.VectorBa"
    "rrel*\035\n\010DataType\022\006\n\002OK\020\000\022\t\n\005WRONG\020\001", 275);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "response.datainfo.proto", &protobuf_RegisterTypes);
  VectorBarrel::default_instance_ = new VectorBarrel();
  DataInfo::default_instance_ = new DataInfo();
  VectorBarrel::default_instance_->InitAsDefaultInstance();
  DataInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_response_2edatainfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_response_2edatainfo_2eproto {
  StaticDescriptorInitializer_response_2edatainfo_2eproto() {
    protobuf_AddDesc_response_2edatainfo_2eproto();
  }
} static_descriptor_initializer_response_2edatainfo_2eproto_;
const ::google::protobuf::EnumDescriptor* DataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataType_descriptor_;
}
bool DataType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int VectorBarrel::kSrcDataSourceFieldNumber;
const int VectorBarrel::kSrcLayerFieldNumber;
const int VectorBarrel::kDstDataSourceFieldNumber;
const int VectorBarrel::kDstLayerFieldNumber;
const int VectorBarrel::kFeaturesFieldNumber;
#endif  // !_MSC_VER

VectorBarrel::VectorBarrel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VectorBarrel::InitAsDefaultInstance() {
}

VectorBarrel::VectorBarrel(const VectorBarrel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VectorBarrel::SharedCtor() {
  _cached_size_ = 0;
  srcdatasource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  srclayer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dstdatasource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dstlayer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VectorBarrel::~VectorBarrel() {
  SharedDtor();
}

void VectorBarrel::SharedDtor() {
  if (srcdatasource_ != &::google::protobuf::internal::kEmptyString) {
    delete srcdatasource_;
  }
  if (srclayer_ != &::google::protobuf::internal::kEmptyString) {
    delete srclayer_;
  }
  if (dstdatasource_ != &::google::protobuf::internal::kEmptyString) {
    delete dstdatasource_;
  }
  if (dstlayer_ != &::google::protobuf::internal::kEmptyString) {
    delete dstlayer_;
  }
  if (this != default_instance_) {
  }
}

void VectorBarrel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VectorBarrel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VectorBarrel_descriptor_;
}

const VectorBarrel& VectorBarrel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2edatainfo_2eproto();
  return *default_instance_;
}

VectorBarrel* VectorBarrel::default_instance_ = NULL;

VectorBarrel* VectorBarrel::New() const {
  return new VectorBarrel;
}

void VectorBarrel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_srcdatasource()) {
      if (srcdatasource_ != &::google::protobuf::internal::kEmptyString) {
        srcdatasource_->clear();
      }
    }
    if (has_srclayer()) {
      if (srclayer_ != &::google::protobuf::internal::kEmptyString) {
        srclayer_->clear();
      }
    }
    if (has_dstdatasource()) {
      if (dstdatasource_ != &::google::protobuf::internal::kEmptyString) {
        dstdatasource_->clear();
      }
    }
    if (has_dstlayer()) {
      if (dstlayer_ != &::google::protobuf::internal::kEmptyString) {
        dstlayer_->clear();
      }
    }
  }
  features_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VectorBarrel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string SrcDataSource = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_srcdatasource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->srcdatasource().data(), this->srcdatasource().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_SrcLayer;
        break;
      }

      // required string SrcLayer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SrcLayer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_srclayer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->srclayer().data(), this->srclayer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_DstDataSource;
        break;
      }

      // required string DstDataSource = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DstDataSource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dstdatasource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dstdatasource().data(), this->dstdatasource().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_DstLayer;
        break;
      }

      // required string DstLayer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DstLayer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dstlayer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dstlayer().data(), this->dstlayer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_features;
        break;
      }

      // repeated int32 features = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_features:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_features())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_features())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_features;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VectorBarrel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string SrcDataSource = 1;
  if (has_srcdatasource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->srcdatasource().data(), this->srcdatasource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->srcdatasource(), output);
  }

  // required string SrcLayer = 2;
  if (has_srclayer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->srclayer().data(), this->srclayer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->srclayer(), output);
  }

  // required string DstDataSource = 3;
  if (has_dstdatasource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dstdatasource().data(), this->dstdatasource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->dstdatasource(), output);
  }

  // required string DstLayer = 4;
  if (has_dstlayer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dstlayer().data(), this->dstlayer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->dstlayer(), output);
  }

  // repeated int32 features = 5;
  for (int i = 0; i < this->features_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->features(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VectorBarrel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string SrcDataSource = 1;
  if (has_srcdatasource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->srcdatasource().data(), this->srcdatasource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->srcdatasource(), target);
  }

  // required string SrcLayer = 2;
  if (has_srclayer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->srclayer().data(), this->srclayer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->srclayer(), target);
  }

  // required string DstDataSource = 3;
  if (has_dstdatasource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dstdatasource().data(), this->dstdatasource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dstdatasource(), target);
  }

  // required string DstLayer = 4;
  if (has_dstlayer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dstlayer().data(), this->dstlayer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->dstlayer(), target);
  }

  // repeated int32 features = 5;
  for (int i = 0; i < this->features_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->features(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VectorBarrel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string SrcDataSource = 1;
    if (has_srcdatasource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->srcdatasource());
    }

    // required string SrcLayer = 2;
    if (has_srclayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->srclayer());
    }

    // required string DstDataSource = 3;
    if (has_dstdatasource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dstdatasource());
    }

    // required string DstLayer = 4;
    if (has_dstlayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dstlayer());
    }

  }
  // repeated int32 features = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->features_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->features(i));
    }
    total_size += 1 * this->features_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VectorBarrel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VectorBarrel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VectorBarrel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VectorBarrel::MergeFrom(const VectorBarrel& from) {
  GOOGLE_CHECK_NE(&from, this);
  features_.MergeFrom(from.features_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srcdatasource()) {
      set_srcdatasource(from.srcdatasource());
    }
    if (from.has_srclayer()) {
      set_srclayer(from.srclayer());
    }
    if (from.has_dstdatasource()) {
      set_dstdatasource(from.dstdatasource());
    }
    if (from.has_dstlayer()) {
      set_dstlayer(from.dstlayer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VectorBarrel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorBarrel::CopyFrom(const VectorBarrel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorBarrel::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void VectorBarrel::Swap(VectorBarrel* other) {
  if (other != this) {
    std::swap(srcdatasource_, other->srcdatasource_);
    std::swap(srclayer_, other->srclayer_);
    std::swap(dstdatasource_, other->dstdatasource_);
    std::swap(dstlayer_, other->dstlayer_);
    features_.Swap(&other->features_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VectorBarrel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VectorBarrel_descriptor_;
  metadata.reflection = VectorBarrel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataInfo::kTypeFieldNumber;
const int DataInfo::kDataIndexFieldNumber;
const int DataInfo::kBarrelFieldNumber;
#endif  // !_MSC_VER

DataInfo::DataInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataInfo::InitAsDefaultInstance() {
  barrel_ = const_cast< ::hpgc::VectorBarrel*>(&::hpgc::VectorBarrel::default_instance());
}

DataInfo::DataInfo(const DataInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  dataindex_ = 0;
  barrel_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataInfo::~DataInfo() {
  SharedDtor();
}

void DataInfo::SharedDtor() {
  if (this != default_instance_) {
    delete barrel_;
  }
}

void DataInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataInfo_descriptor_;
}

const DataInfo& DataInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2edatainfo_2eproto();
  return *default_instance_;
}

DataInfo* DataInfo::default_instance_ = NULL;

DataInfo* DataInfo::New() const {
  return new DataInfo;
}

void DataInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    dataindex_ = 0;
    if (has_barrel()) {
      if (barrel_ != NULL) barrel_->::hpgc::VectorBarrel::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hpgc.DataType Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hpgc::DataType_IsValid(value)) {
            set_type(static_cast< ::hpgc::DataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_DataIndex;
        break;
      }

      // required int32 DataIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DataIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dataindex_)));
          set_has_dataindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_barrel;
        break;
      }

      // required .hpgc.VectorBarrel barrel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_barrel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_barrel()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hpgc.DataType Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int32 DataIndex = 2;
  if (has_dataindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dataindex(), output);
  }

  // required .hpgc.VectorBarrel barrel = 3;
  if (has_barrel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->barrel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hpgc.DataType Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int32 DataIndex = 2;
  if (has_dataindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dataindex(), target);
  }

  // required .hpgc.VectorBarrel barrel = 3;
  if (has_barrel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->barrel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hpgc.DataType Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 DataIndex = 2;
    if (has_dataindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dataindex());
    }

    // required .hpgc.VectorBarrel barrel = 3;
    if (has_barrel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->barrel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataInfo::MergeFrom(const DataInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_dataindex()) {
      set_dataindex(from.dataindex());
    }
    if (from.has_barrel()) {
      mutable_barrel()->::hpgc::VectorBarrel::MergeFrom(from.barrel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataInfo::CopyFrom(const DataInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_barrel()) {
    if (!this->barrel().IsInitialized()) return false;
  }
  return true;
}

void DataInfo::Swap(DataInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(dataindex_, other->dataindex_);
    std::swap(barrel_, other->barrel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataInfo_descriptor_;
  metadata.reflection = DataInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace hpgc

// @@protoc_insertion_point(global_scope)
